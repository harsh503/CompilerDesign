%token AUTO BREAK CASE CHAR CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM EXTERN FLOAT FOR GOTO IF INT LONG REGISTER RETURN SHORT SIGNED SIZEOF STATIC STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE
%token IDENTIFIER CONSTANT STRING_LITERAL ASSIGN_OP REL_OP ADD_OP MUL_OP INCDEC_OP EQU_OP  

%{
#include<stdio.h>
extern lineno;
%}
%start PROGRAM
%%
PROGRAM 
    :EXTERNAL_DECLARATION
    |PROGRAM EXTERNAL_DECLARATION
    ;
EXTERNAL_DECLARATION
    :FUNCTION_DEFINITION
    |DECLARATION
    ;

DECLARATION 
    : DECLARATION_SPECIFIER INIT_DECLARATOR_LIST ';'
    ;

DECLARATION_SPECIFIER
    : STORAGE_CLASS_SPECIFIER 
    | STORAGE_CLASS_SPECIFIER DECLARATION_SPECIFIER 
    | TYPE_SPECIFIER 
    | TYPE_SPECIFIER DECLARATION_SPECIFIER
    ;

STORAGE_CLASS_SPECIFIER
    : TYPEDEF
    | EXTERN
    | STATIC
    | AUTO
    | REGISTER
    ;

TYPE_SPECIFIER
    : VOID
    | CHAR
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | SIGNED
    | UNSIGNED
    ;

INIT_DECLARATOR_LIST 
    : INIT_DECLARATOR
    | INIT_DECLARATOR_LIST ',' INIT_DECLARATOR
    ;

INIT_DECLARATOR
    : DECLARATOR
    | DECLARATOR '=' CONSTANT
    ;   

DECLARATOR
    : IDENTIFIER
    | '(' DECLARATOR ')'
    | FUNCTION_DECLARATION
    ;

FUNCTION_DECLARATION
    : IDENTIFIER '(' DECLARATION_SPECIFIER_LIST ')'
    |IDENTIFIER '('')'
    ;

FUNCTION_DEFINITION 
    : DECLARATION_SPECIFIER IDENTIFIER '('  ')' COMPOUND_STATEMENT
    | DECLARATION_SPECIFIER IDENTIFIER '(' DEFINITION_SPECIFIER_LIST ')' COMPOUND_STATEMENT
    ;


DECLARATION_SPECIFIER_LIST
    : DECLARATION_SPECIFIER_LIST ',' DECLARATION_SPECIFIER 
    | DECLARATION_SPECIFIER
    ;


DEFINITION_SPECIFIER_LIST
    :VARIABLE_DECLARATION 
    | DEFINITION_SPECIFIER_LIST ',' VARIABLE_DECLARATION
    ;
VARIABLE_DECLARATION
    :DECLARATION_SPECIFIER IDENTIFIER
    ;
COMPOUND_STATEMENT
    :'{' STATEMENT_LIST '}'
    |'{''}'
    ;

STATEMENT_LIST
    :STATEMENT_LIST STATEMENT
    |STATEMENT
    ;
STATEMENT
    :';'
    ;

%%
int yyerror()
{
    printf("parsing error %d",lineno);
    return (1);
}
main()
{
    yyparse();
}
